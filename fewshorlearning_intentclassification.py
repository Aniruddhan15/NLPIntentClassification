# -*- coding: utf-8 -*-
"""FewShorLearning-IntentClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRlu-piprfy7nvP5Hcz8bBrLmtjUvrHX
"""

import pandas as pd
import numpy as np
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

df = pd.read_csv('/content/chatbot_intent_classification.csv')

df[:30]

few_shot_examples = [
    {"user_input": "Cancel my subscription, please.", "intent": "cancellation"},
    {"user_input": "I forgot my password.", "intent": "password_reset"},
    {"user_input": "What time do you open?", "intent": "business_hours"},
    {"user_input": "Where is my package?", "intent":	"order_status"},
    {"user_input": "I want to return my order.", "intent":	"return_request"},
    {"user_input":"Can you help me with my account?","intent": "account_help"},
    {"user_input":"	How can I update my payment method?","intent": "payment_update"},
    {"user_input":"	I need technical support.","intent": "technical_support"},

]

def create_few_shot_prompt(user_input, examples, instruction="Classify the intent of the following user input:"):
    """
    Builds a prompt by providing a few examples followed by the new input.
    """
    prompt = "Below are a few examples of user inputs and their intents:\n"
    for ex in examples:
        prompt += f"User: \"{ex['user_input']}\"\nIntent: {ex['intent']}\n\n"
    prompt += f"{instruction}\nUser: \"{user_input}\"\nIntent:"
    return prompt

model_name = "google/flan-t5-large"  # Recommended few-shot model
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSeq2SeqLM.from_pretrained(model_name)

def few_shot_predict(user_input, examples=few_shot_examples):
    """
    Generates a prediction using few-shot prompting.
    """
    prompt = create_few_shot_prompt(user_input, examples)
    input_ids = tokenizer.encode(prompt, return_tensors="pt", truncation=True)
    outputs = model.generate(input_ids, max_length=50)
    prediction = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return prediction.strip()

results = []
for idx, row in df.iterrows():  # Evaluate on first 10 samples for demonstration
    input_text = row["user_input"]
    true_intent = row["intent"]
    pred_intent = few_shot_predict(input_text)
    results.append({"user_input": input_text, "true_intent": true_intent, "predicted_intent": pred_intent})
    print(f"Input: {input_text}")
    print(f"True Intent: {true_intent}")
    print(f"Predicted Intent: {pred_intent}")
    print("-" * 50)

# ----------------------------
# Step 5: Compute a Simple Accuracy on the Sample
# ----------------------------
true_labels = [r["true_intent"] for r in results]
pred_labels = [r["predicted_intent"] for r in results]
accuracy = np.mean([t == p for t, p in zip(true_labels, pred_labels)])
print("Accuracy on sample:", accuracy)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

print(classification_report(true_labels, pred_labels))
print(confusion_matrix(true_labels, pred_labels))

